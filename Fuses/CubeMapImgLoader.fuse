--- Load the six faces of a cube ... WORK IN PROGRESS
--


-- ----------------------------------------------------------------------------------------------------------------------------------------

FuRegisterClass("CubeMapImgLoader_nmbr73", CT_SourceTool, {
  REGS_Name = "CubeMap Img Loader",
  REGS_Category = "Fuses/Kernfusion",
  REGS_OpDescription = "The CubeMap Image Loader loads the six faces of a cube from single imag files. Serves for example as an input fragment shaders that use a cube map. Use the CubeMap (3Cu) tool to test this Fuse.",
  REGS_OpIconString = "CMIL",
  REG_Source_GlobalCtrls = true,
  REG_Source_SizeCtrls = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls = true,
  REG_TimeVariant = false,
  REGS_Company = "nmbr73",
  REGS_URL = "https://nmbr73.github.io/",
  REG_Version	= 000001,
  REG_Fuse_NoEdit = true,
  REG_Fuse_NoReload = true,
  })

-------------------------------------------------------------------------------------------------------------------------------------------

HAS_ERRORS        = false
CURRENT_FILE      = ""
CURRENT_LAYOUT    = 0
TEXTURE_IMAGE     = nil
LAYOUT_INFOS      = {}

-------------------------------------------------------------------------------------------------------------------------------------------

function getLayoutInfo(index)

  if LAYOUT_INFOS==nil then
    return "-"
  end

  return '<font color="gray">'..LAYOUT_INFOS[index].."</font>"
end

-------------------------------------------------------------------------------------------------------------------------------------------

function setError(msg)

  if msg==nil or msg == '' then
    InErrorLabel:SetAttrs({LINKS_Name = "", IC_Visible=false })
  else
    print(msg)
    InErrorLabel:SetAttrs({LINKS_Name = '<font color="#f93931">'..msg..'</font>', IC_Visible=true })
  end

end

-------------------------------------------------------------------------------------------------------------------------------------------
-- Callback to initialize the tool.
--
function Create()


  LAYOUT_INFOS = { [0] =
    "Horizontal Cross",
    "Vertical Cross",
    "Face 0 / +X / right",
    "Face 1 / -X / left",
    "Face 2 / +Y / top",
    "Face 3 / -Y / bottom",
    "Face 4 / +Z / front",
    "Face 5 / -Z / back",
  }

  InLayoutInfo = self:AddInput( getLayoutInfo(6),"layoutInfo", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INPS_StatusText = "Current layout is "..LAYOUT_INFOS[0],
    LBLC_MultiLine = true,
    IC_NoReset = true,
    INP_External = false,
    INP_Passive = true,
    IC_NoLabel = false,
    ICD_Width =0.6,
  })




  InLayoutButton = self:AddInput("Layout", "layout", {
    INPID_InputControl = "MultiButtonControl",
    LINKID_DataType = "Number",
    INP_DoNotifyChanged = true,
    INP_Default = 0,
    MBTNC_ForceButtons = true,

    { MBTNC_AddButton = 'H', MBTNCD_ButtonWidth = 0.125, MBTNCS_ToolTip = LAYOUT_INFOS[0] },
    { MBTNC_AddButton = 'V', MBTNCD_ButtonWidth = 0.125, MBTNCS_ToolTip = LAYOUT_INFOS[1] },
  })

  for i = 0,5 do
    InLayoutButton:SetAttrs({ MBTNC_AddButton = ''..i, MBTNCD_ButtonWidth = 0.125, MBTNCS_ToolTip = LAYOUT_INFOS[i+2] })
  end


  InFiles= {}

  for i = 0,5 do
    InFiles[i] = self:AddInput(LAYOUT_INFOS[i+2], "file"..i, { LINKID_DataType = "Text", INPID_InputControl = "FileControl", FC_IsSaver = false, FC_ClipBrowse = true,  })
  end



  InErrorLabel = self:AddInput( "Error", "error", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    LBLC_MultiLine = true,
    IC_NoReset = true,
    INP_External = false,
    INP_Passive = true,
    -- IC_NoLabel = true,
    IC_Visible = false,
  })


  OutImage   = self:AddOutput( "Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main = 1
  })

  self:AddControlPage("Image")

  InGlobalIn  = self:AddInput("Global In",  "GlobalIn",  { LINKID_DataType = "Number", })
  InGlobalOut = self:AddInput("Global Out", "GlobalOut", { LINKID_DataType = "Number", })

end

-------------------------------------------------------------------------------------------------------------------------------------------

function LoadFrame(file, size)

  local frame = Clip(file,false):GetFrame(0)

  if frame == nil then
    setError("failed to load file '"..file.."''")
    return nil
  end

  if frame.Width ~= frame.Height then
    setError("file '"..file.."'' must be a square image")
    return nil
  end

  if size ~= nil and frame.Width ~= size then
    setError("file '"..file.."'' is not "..size.."x"..size.." as the precious image is")
    return nil
  end

  return frame
end

-------------------------------------------------------------------------------------------------------------------------------------------

function LoadTextures(files,layout)


  for i=0,5 do

    if files[i]==nil or files[i]=='' then
      setError("please choose image file for face "..i)
      return
    end

    if not bmd.fileexists(files[i]) then
      setError("no such file '"..files[i].."' for face "..i)
      return
    end
  end

  -- local size = clip:GetFrame(0).Width

  -- for i=0,5 do
  --   if clip:GetFrame(0).Width~=clip:GetFrame(0).Height or clip:GetFrame(0).Width ~=size then
  --     setError("images must be squares and all of the same size")
  --     return
  --   end
  -- end

  local frames = {}
  local size   = nil

  if CURRENT_LAYOUT == 0 or CURRENT_LAYOUT == 1 then
    frames[0] = LoadFrame(files[0],nil)
    size  = frames[0].Width

    for i=1,5 do
      frames[i]=LoadFrame(files[i],size)
      if frames[i]==nil then
        return
      end
    end

  end


  if CURRENT_LAYOUT == 0 then


    TEXTURE_IMAGE = Image({
      IMG_Document = self.Comp,
      { IMG_Channel = "Red",    },
      { IMG_Channel = "Green",  },
      { IMG_Channel = "Blue",   },
      { IMG_Channel = "Alpha",  },
      IMG_Width   = size * 4,
      IMG_Height  = size * 3,
      IMG_XScale  = 1.0,
      IMG_YScale  = 1.0,
    })

    TEXTURE_IMAGE:Fill(Pixel({R=0,G=0,B=0,A=0}))


    TEXTURE_IMAGE:OMerge(frames[1], 0,        size )
    TEXTURE_IMAGE:OMerge(frames[4], 1*size,   size )
    TEXTURE_IMAGE:OMerge(frames[0], 2*size,   size )
    TEXTURE_IMAGE:OMerge(frames[5], 3*size,   size )
    TEXTURE_IMAGE:OMerge(frames[3],   size, 0      )
    TEXTURE_IMAGE:OMerge(frames[2],   size, 2*size )


  elseif CURRENT_LAYOUT == 1 then

    TEXTURE_IMAGE = Image({
      IMG_Document = self.Comp,
      { IMG_Channel = "Red",    },
      { IMG_Channel = "Green",  },
      { IMG_Channel = "Blue",   },
      { IMG_Channel = "Alpha",  },
      IMG_Width   = size * 3,
      IMG_Height  = size * 4,
      IMG_XScale  = 1.0,
      IMG_YScale  = 1.0,
    })

    TEXTURE_IMAGE:Fill(Pixel({R=0,G=0,B=0,A=0}))

    local rotate={
      XF_XOffset  = 0.5,    XF_YOffset  = 0.5,
      XF_XAxis    = 0.5,    XF_YAxis    = 0.5,
      XF_XSize    = 1.0,    XF_YSize    = 1.0,
      XF_EdgeMode = 'Black',
      XF_Angle    = 180.0,
    }

    TEXTURE_IMAGE:OMerge(frames[2], size, size*3)
    TEXTURE_IMAGE:OMerge(frames[4], size, size*2)
    TEXTURE_IMAGE:OMerge(frames[3], size, size)
    TEXTURE_IMAGE:OMerge(frames[5]:Transform(nil, rotate), size, 0)
    TEXTURE_IMAGE:OMerge(frames[1], 0,      size*2)
    TEXTURE_IMAGE:OMerge(frames[0], size*2, size*2)

  else

    local frame = LoadFrame(files[CURRENT_LAYOUT-2],nil)

    if frame ~= nil then
      TEXTURE_IMAGE = frame
    end

  end


end

-------------------------------------------------------------------------------------------------------------------------------------------
-- Callback to render the node.
--
function Process(req)

	local file
  local layout    = InLayoutButton:GetValue(req).Value
  local files     = {}

  for i=0,5 do
    files[i]=InFiles[i]:GetValue(req).Value
  end
  file = '('..table.concat(files,",")..')'


  if CURRENT_FILE ~= file or CURRENT_LAYOUT ~= layout then

    if CURRENT_FILE~=file then
      CURRENT_FILE=file
    end

    CURRENT_LAYOUT  = layout
    TEXTURE_IMAGE   = nil
    HAS_ERRORS      = false
    setError(nil)

    for i=0,5 do
      files[i]=self.Comp:MapPath(files[i])
    end
    LoadTextures(files,layout)

  end




  if TEXTURE_IMAGE~=nil then
    OutImage:Set(req,TEXTURE_IMAGE)
    return
  end


  if not HAS_ERRORS then
    OutImage:Set(req,nil)
    HAS_ERRORS = true
    return
  end


  local dst = Image({
    IMG_Document = self.Comp,
    { IMG_Channel = "Red",    },
    { IMG_Channel = "Green",  },
    { IMG_Channel = "Blue",   },
    { IMG_Channel = "Alpha",  },
    IMG_Width   = 40,
    IMG_Height  = 30,
    IMG_XScale  = 1.0,
    IMG_YScale  = 1.0,
  })

  dst:Fill(Pixel({R=1.0,G=0,B=0,A=0}))

  if req:IsPreCalc() then
    dst = Image({IMG_Like = dst, IMG_NoData = true})
  end

  OutImage:Set(req,dst)

end



-------------------------------------------------------------------------------------------------------------------------------------------
-- Callback to handle UI control events.
--

function NotifyChanged(inp, param, time)

  if inp == nil or param == nil then
    return
  end

  if inp == InLayoutButton then

    InLayoutInfo:SetAttrs({
      LINKS_Name = getLayoutInfo(param.Value),
      INPS_StatusText = "Current layout is "..LAYOUT_INFOS[param.Value],
    })

    return
  end


end
