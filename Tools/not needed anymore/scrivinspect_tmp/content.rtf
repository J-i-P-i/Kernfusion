{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Arial-BoldMT;\f2\froman\fcharset0 Palatino-Roman;
\f3\froman\fcharset0 Palatino-Italic;\f4\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red74\green11\blue102;\red45\green70\blue22;}
{\*\expandedcolortbl;;\cssrgb\c36500\c11000\c47800;\cssrgb\c22700\c33700\c11000;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl264\slmult1\sb260\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <$ScrKeepWithNext><$Scr_H::1><$Scr_Ps::0>
\f1\b\fs36 Some Examples to test Styles, Export, Transformation\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\pardeftab720\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 <!$Scr_H::1><!$Scr_Ps::0>
\f2\fs26 This is to check what happens to self defined styles in the output. That\'92s to see how some more 
\f0\fs24 <$Scr_Cs::4>
\f3\i\fs26 semantic markup
\f0\i0\fs24 <!$Scr_Cs::4>
\f2\fs26  of the text could be realised and how to preserve the information for output formatting.\
Some Lua code as a single 
\f0\fs24 <$Scr_Cs::5>
\f4\fs22 Code Block (Lua)
\f0\fs24 <!$Scr_Cs::5>
\f2\fs26 :\
\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 <$Scr_Ps::1>
\f4\fs22 -- defines a factorial function\
function fact (n)\
  if n == 0 then\
    return 1\
  else\
    return n * fact(n-1)\
  end\
end\
\
print("enter a number:")\
a = io.read("*number")        -- read a number\
print(fact(a))\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\pardeftab720\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <!$Scr_Ps::1>
\f2\fs26 And again some Lua code, but this time written down in the corresponding style instead of selection the text and then setting the style. This way the \'93next\'94 option of the Style should take effect and question is, if this leads to separate paragraphs of the same style or something else.\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 <$Scr_Ps::1>
\f4\fs22 -- The famous words:\
print(\'93Hello World!\'94)\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\pardeftab720\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <!$Scr_Ps::1>
\f2\fs26 \'85 and we are back to normal.\
And here comes the same for some Python code:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f0\fs24 \cf3 <$Scr_Ps::2>
\f4\fs22 # This program adds two numbers\
\
num1 = 1.5\
num2 = 6.3\
\
# Add two numbers\
sum = num1 + num2\
\
# Display the sum\
print('The sum of \{0\} and \{1\} is \{2\}'.format(num1, num2, sum))\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\pardeftab720\fi360\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <!$Scr_Ps::2>
\f2\fs26 And some code block in the default style - so not specified any further:\
\pard\tx720\tx1080\tx1440\tx1800\tx2160\li720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <$Scr_Ps::3>
\f4\fs22 The sum of 1.5 and 6.3 is 7.8\
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 <!$Scr_Ps::3>
\f2\fs26 \'85\
Probably there are ways to make these code blocks look nicer in Scrivener to help with the authoring in the app - but that\'92s not the purpose here and should (hopefully) not change anything for the exports. }